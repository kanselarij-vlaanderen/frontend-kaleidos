import Route from '@ember/routing/route';
import { action } from '@ember/object';
import { PAGE_SIZE } from 'frontend-kaleidos/config/config';
import { hash } from 'rsvp';
import { tracked } from '@glimmer/tracking';

// use:
// - isPieceDeletable property
// - file property avoids error when piece (and file) are deleted
export class PieceRow {
  @tracked piece;
  @tracked requestActivitiesUsedBy;

  // no async constructor() in JS
  static async create(piece) {
    const row = new PieceRow();
    row.piece = piece;
    // avoid awaiting in getter
    row.requestActivitiesUsedBy = await piece.requestActivitiesUsedBy;
    return row;
  }

  get isPieceDeletable() {
    // can be translation or publication related
    const isUsedInRequest = this.requestActivitiesUsedBy.length > 0;
    // receivedDate is set if and only if it is a received pieced
    const isReceived = !!this.piece.receivedDate;
    const isUsed = isUsedInRequest || isReceived;
    return !isUsed;
  }
}

export default class PublicationsPublicationProofsDocumentsRoute extends Route {
  async model() {
    this.publicationSubcase = this.modelFor('publications.publication.proofs');

    const queryProperties = {
      include: [
        'file',
        'publication-subcase-correction-for',
        'request-activities-used-by'
      ].join(','),
      'page[size]': PAGE_SIZE.PUBLICATION_FLOW_PIECES,
    };

    // Fetching all documents for the publication-subcase is split into multiple requests on purpose.
    // It seems when using a single request on publication-subcase with an include query param
    // for pieces (via the different paths) ember-data does not catch the inverse relation
    // from piece to publication-subcase. This results in an additional request per piece
    // when piece.publicationSubcaseCorrectionFor is used in the template.

    // Source documents uploaded on the publication subcase
    const sourceDocumentsPromise = this.store.query('piece', {
      'filter[publication-subcase-source-for][:id:]': this.publicationSubcase.id,
      ...queryProperties,
    });

    // Correction documents uploaded on the publication subcase
    const correctionDocumentsPromise = this.store.query('piece', {
      'filter[publication-subcase-correction-for][:id:]': this.publicationSubcase.id,
      ...queryProperties,
    });

    // Received proofing documents generated by a proofing-activity
    const receivedProofingDocumentsPromise = this.store.query('piece', {
      'filter[proofing-activity-generated-by][subcase][:id:]': this.publicationSubcase.id,
      ...queryProperties,
    });

    // Decisions published in BS as a result of a publication-activity
    const decisionsPromise = this.store.query('decision', {
      'filter[publication-activity][subcase][:id:]': this.publicationSubcase.id,
      sort: 'publication-date',
    });

    // disable lint: decisions is constant, but pieces is variable
    // eslint-disable-next-line prefer-const
    let [decisions, ...pieces] = await Promise.all([
      decisionsPromise,
      sourceDocumentsPromise,
      correctionDocumentsPromise,
      receivedProofingDocumentsPromise
    ]);
    pieces = pieces.flatMap((pieces) => pieces.toArray());
    pieces = new Set(pieces); // using set to ensure a collection of unique pieces
    pieces = [...pieces];

    const pieceRows = await Promise.all(pieces.map((piece) => PieceRow.create(piece)));
    return hash({
      pieceRows: pieceRows,
      decisions: decisions,
    });
  }

  afterModel() {
    this.publicationFlow = this.modelFor('publications.publication');
  }

  setupController(controller) {
    super.setupController(...arguments);
    controller.publicationFlow = this.publicationFlow;
    controller.publicationSubcase = this.publicationSubcase;
    controller.selectedPieceRows = [];
  }

  @action
  refresh() {
    super.refresh();
  }
}
