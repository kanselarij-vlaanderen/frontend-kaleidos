import Route from '@ember/routing/route';
import { PAGE_SIZE } from 'frontend-kaleidos/config/config';
import { A } from '@ember/array';

export default class PublicationsPublicationProofsDocumentsRoute extends Route {
  async model() {
    this.publicationSubcase = this.modelFor('publications.publication.proofs');

    const queryProperties = {
      include: [
        'file'
      ].join(','),
      'page[size]': PAGE_SIZE.PUBLICATION_FLOW_PIECES,
    };

    // Fetching all documents for the publication-subcase is split into multiple requests on purpose.
    // It seems when using a single request on publication-subcase with an include query param
    // for pieces (via the different paths) ember-data does not catch the inverse relation
    // from piece to publication-subcase. This results in an additional request per piece
    // when piece.publicationSubcase is used in the template.

    // Source documents uploaded on the publication subcase
    const sourceDocumentsRequest = this.store.query('piece', {
      'filter[publication-subcase-source-for][:id:]': this.publicationSubcase.id,
      ...queryProperties,
    });

    // Correction documents uploaded on the publication subcase
    const correctionDocumentsRequest = this.store.query('piece', {
      'filter[publication-subcase-correction-for][:id:]': this.publicationSubcase.id,
      include: [
        'file',
        'publication-subcase-correction-for'
      ].join(','),
      'page[size]': PAGE_SIZE.PUBLICATION_FLOW_PIECES,
    });

    // Received proofing documents generated by a proofing-activity
    const receivedProofingDocumentsRequest = this.store.query('piece', {
      'filter[proofing-activity-generated-by][subcase][:id:]': this.publicationSubcase.id,
      ...queryProperties,
    });

    // Received publication documents (= decisions published in BS) generated by a publication-activity
    const receivedPublicationDocumentsRequest = this.store.query('piece', {
      'filter[publication-activity-generated-by][subcase][:id:]': this.publicationSubcase.id,
      ...queryProperties,
    });

    let pieces = await Promise.all([
      sourceDocumentsRequest,
      correctionDocumentsRequest,
      receivedProofingDocumentsRequest,
      receivedPublicationDocumentsRequest
    ]);
    pieces = pieces.flatMap((pieces) => pieces.toArray());
    pieces = new Set(pieces); // using set to ensure a collection of unique pieces
    pieces = A([...pieces]);

    return pieces;
  }

  afterModel() {
    // translationSubcase.publicationFlow causes additional network request
    // while the request is already made in 'publications.publication'
    this.publicationFlow = this.modelFor('publications.publication');
  }

  async setupController(controller) {
    super.setupController(...arguments);

    controller.publicationFlow = this.publicationFlow;
    controller.publicationSubcase = this.publicationSubcase;
    controller.selectedPieces = [];
    controller.initSort();
  }
}
