def getBranchName(branch) {
  return branch.replaceAll("/", "-").replaceAll(" ", "-").toLowerCase()
}

pipeline {
    agent any

    environment {
        branch = getBranchName("${env.GIT_BRANCH}")
        project = "Kaleidos"
        appName = "${env.JOB_NAME - ~/\/.*/}"
        version = "${branch}-${env.BUILD_NUMBER}"
        projectName = "${project}--${appName}--${version}"
    }

    stages {
        stage('Checkout project') {
            steps {
                sh "cp .dist.env .env"
                sh "rm -rf kaleidos-project 2> /dev/null"
                sh "git clone -b development https://github.com/kanselarij-vlaanderen/kaleidos-project.git"
            }
        }
        stage('Prepare for automated tests') {
            environment {
                HOST_UID_GID = "$(id -u):$(id -g)" 
            }
            steps {
                sh "cp ${env.WORKSPACE}/Dockerfile.test ${env.WORKSPACE}/Dockerfile"
                sh "cp ${env.WORKSPACE}/ci/docker-compose.override.yml ${env.WORKSPACE}/kaleidos-project/docker-compose.override.yml"
                sh "cd ${WORKSPACE}/kaleidos-project && mkdir data && chmod 777 data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} up -d"

                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T triplestore chmod -R 777 /data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T musearch chmod -R 777 /data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T musearch chmod -R 777 /data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName}  exec -T file-bundling-service chmod -R 777 /share"

                // sh "docker-compose -p ${projectName} exec -T web mkdir /var/www/project/web/sites/default/files || true"
                // sh "docker-compose -p ${projectName} exec -T web chown -R www-data:www-data /var/www/project/web/sites/default/files"
                // sh "docker-compose -p ${projectName} exec -T web chown -R www-data:www-data /var/www/project/storage/php"
                // sh "docker-compose -p ${projectName} exec -T web chown -R www-data:www-data /var/www/project/private/files"
                // sh "docker-compose -p ${projectName} exec -T --user=www-data web /wait-for.sh database:3306 -s -t 90 -- ./vendor/bin/phing update"
                // sh "docker-compose -p ${projectName} exec -T --user=www-data web /wait-for.sh database:3306 -s -t 90 -- ./vendor/bin/phing initialize-search-index"

                sh "cp cypress.test.json cypress.json"
                sh "cp ${WORKSPACE}/ci/package.* ${WORKSPACE}/"
                sh "cp ${WORKSPACE}/ci/.env.cypress ${WORKSPACE}/.env.cypress"
                sh "npm i --production"

                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose  -p ${projectName} exec -T elasticsearch chmod -R 777 /usr/share/elasticsearch/data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose  -p ${projectName} kill triplestore elasticsearch musearch file cache resource"
                sh "cd ${WORKSPACE}/kaleidos-project && rm -rf testdata"
                sh "cd ${WORKSPACE}/kaleidos-project && unzip -o testdata.zip -d ${WORKSPACE}/kaleidos-project"
                sh "cd ${WORKSPACE}/kaleidos-project && rm -rf data/*"
                sh "cd ${WORKSPACE}/kaleidos-project && mv testdata/* data"
                sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} up -d"
                sh "sleep 60"
            }
        }
        stage('Automated tests: Cypress') {
            steps {
                sh "npx cypress run"
            }
        }


        //stage('Create deployable artifact') {
        //    when {
        //        not {
        //            branch 'feature/*'
        //        }
        //        not {
        //            branch 'pr-*'
        //        }
        //    }
        //    steps {
        //        // sh "docker-compose -p ${projectName} exec -T web tar -zcf deploy.tar.gz web vendor private migration config scripts storage init/database init/files/media-icons build.xml composer.json"
        //        // sh "docker cp `docker-compose -p ${projectName} ps -q web`:/var/www/project/deploy.tar.gz ${WORKSPACE}"
        //         archiveArtifacts artifacts: "deploy.tar.gz"
        //    }
        //}
    }
    post {
        always {

            // sh "docker cp `docker-compose -p ${projectName} ps -q web`:/var/www/project/reports/. ${WORKSPACE}/reports"

            sh " ${WORKSPACE}/cypress/screenshots ${WORKSPACE}/reports/cypress_screenshots || true"

            // Cypress reports and screenshots
            // xunit([Custom(customXSL: 'init/reports/custom-report-to-junit.xsl', deleteOutputFiles: true, failIfNotNew: false, pattern: 'reports/cypress.*.xml', skipNoTestFiles: true, stopProcessingIfError: true)])

            archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/cypress_screenshots/**/*.png'

            // PHP codesniffer reports
            // recordIssues enabledForFailure: true, tools: [phpCodeSniffer(pattern: 'reports/phpcs.xml')]

            // PHPUnit reports
            // xunit([PHPUnit(deleteOutputFiles: true, failIfNotNew: false, pattern: 'reports/phpunit.xml', skipNoTestFiles: true, stopProcessingIfError: true)])
            // publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports/phpunit-coverage', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: ''])
            // recordIssues(tools: [codeAnalysis(pattern: 'reports/phpunit-coverage.xml')])

            // PHP CPD reports
            // recordIssues(tools: [cpd(pattern: 'reports/phpcpd.xml')])

            // PHP MD reports
            // recordIssues(tools: [pmdParser(pattern: 'reports/phpmd.xml')])

            // Watchdog
            // sh "docker-compose -p ${projectName} exec -T --user=www-data web ./vendor/bin/drush wd-show --root=/var/www/project/web --count=1000 --extended >> reports/watchdog.log"
            // archiveArtifacts artifacts: 'reports/watchdog.log'
        }

        cleanup {
          sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} down -v"
          sh "cd ${WORKSPACE}/kaleidos-project && docker-compose -p ${projectName} rm -f"
          sh "cd ${WORKSPACE}/kaleidos-project && docker rmi -f `docker images | grep -i ${projectName} | tr -s ' ' | cut -d ' ' -f 3`"
          sh "docker network prune -f"
        }
    }
}
