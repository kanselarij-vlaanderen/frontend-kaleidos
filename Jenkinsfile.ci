def getBranchName(branch) {
  return branch.replaceAll("/", "-").replaceAll(" ", "-").toLowerCase()
}

pipeline {
  agent any

  options {
    disableConcurrentBuilds()
  }

  environment {
    branch = getBranchName("${env.GIT_BRANCH}")
    project = "Kaleidos"
    appName = "${env.JOB_NAME - ~/\/.*/}"
    version = "${branch}-${env.BUILD_NUMBER}"
    projectName = "${project}--${appName}--${version}"
    HOME = "${WORKSPACE}"
    NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
  }

  stages {
    stage('Linting') {
      steps {
        sh "export HOST_UID_GID=\$(id -u):\$(id -g)"
        sh "npm install"
        sh "npm run lint"
      }
    }
    stage('Checkout project') {
      steps {
        sh "export HOST_UID_GID=\$(id -u):\$(id -g)"
        sh "cp .dist.env .env"
        sh "rm -rf kaleidos-project 2> /dev/null"
        //sh "eval `ssh-agent -s` && ssh-add /var/lib/jenkins/.ssh/id_rsa_github_kaleidos && git clone -b development https://github.com/kanselarij-vlaanderen/kaleidos-project.git"
        //sh "git clone -b development https://github.com/kanselarij-vlaanderen/kaleidos-project.git"

        // Try to checkout the same frontend branch for the backend.
        // If that fails, checkout the branch we're merging to, this way
        // if we're merging to acceptance we test against acceptance.
        // If that also fails, just check out development
        sh """
          git clone -b ${env.CHANGE_BRANCH} https://github.com/kanselarij-vlaanderen/kaleidos-project.git ||
          git clone -b ${env.CHANGE_TARGET} https://github.com/kanselarij-vlaanderen/kaleidos-project.git ||
          git clone -b development https://github.com/kanselarij-vlaanderen/kaleidos-project.git
        """
      }
    }
    stage('Prepare for automated tests') {
      steps {
        sh "export HOST_UID_GID=\$(id -u):\$(id -g)"
        sh "cp ${env.WORKSPACE}/Dockerfile.ci ${env.WORKSPACE}/Dockerfile"
        sh "cp ${env.WORKSPACE}/ci/docker-compose.override.yml ${env.WORKSPACE}/kaleidos-project/docker-compose.override.yml"

        sh "cd ${WORKSPACE}/kaleidos-project && mkdir data -p && chmod 1777 -R data"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} pull"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} up -d --build"

        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName}  exec -T triplestore chmod -R 1777 /data"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName}  exec -T search chmod 1777 -R /data"
        //sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName}  exec -T elasticsearch chown -R elasticsearch:root /usr/share/elasticsearch/data"
        //sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName}  exec -T elasticsearch chmod 1777 -R /usr/share/elasticsearch/data"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName}  exec -T file-bundling chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T docx-conversion chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T publication-report chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T decision-report-generation chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T minutes-report-generation chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T decision-extraction chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T document-stamping chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T draft-file chmod 777 -R /share"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} exec -T draft-file-mover chmod 777 -R /share"

        sh "cp ${WORKSPACE}/ci/.env.cypress ${WORKSPACE}/.env.cypress"

        // Wait for elasticsearch to have cerated the indices and stuff.
        sh "sleep 45"

        // Make the folders deletable.
        // sh "cd ${WORKSPACE}/kaleidos-project && docker compose  -p ${projectName} exec -T elasticsearch chmod 1777 -R /usr/share/elasticsearch/data"

        // Reset the contents of DB an search
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose  -p ${projectName} kill elasticsearch search"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose  -p ${projectName} rm -fs elasticsearch search"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose  -p ${projectName} kill triplestore file docx-conversion forever-cache cache resource cache-warmup yggdrasil migrations publication-report decision-extraction decision-report-generation file-bundling minutes-report-generation document-stamping draft-file draft-file-mover"
        sh "cd ${WORKSPACE}/kaleidos-project && rm -rf testdata && rm -rf testdata-elasticsearch"
        sh "cd ${WORKSPACE}/kaleidos-project && unzip -o testdata.zip -d ${WORKSPACE}/kaleidos-project"
        sh "cd ${WORKSPACE}/kaleidos-project && unzip -o testdata-elasticsearch.zip -d ${WORKSPACE}/kaleidos-project"
        sh "cd ${WORKSPACE}/kaleidos-project && mv ${WORKSPACE}/kaleidos-project/testdata-elasticsearch/* ${WORKSPACE}/kaleidos-project/testdata"
        sh "cd ${WORKSPACE}/kaleidos-project && chmod 1777 -R data"
        sh "cd ${WORKSPACE}/kaleidos-project && rm -rf data/*"
        sh "cd ${WORKSPACE}/kaleidos-project && cp -rf testdata/* data"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} up -d triplestore migrations cache forever-cache"
        // cascaded startup, wait for migrations before warmup up cache
        sh "sleep 30"

        // up the system
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} up -d"
        //sh "cd ${WORKSPACE}/kaleidos-project && docker compose  -p ${projectName} exec -T elasticsearch chmod 1777 -R /usr/share/elasticsearch/data"

        // Wait for indexation.
        sh "sleep 600"
      }
    }
    stage('Automated tests: Cypress') {
      steps {
        // sh "npx cypress run"
        sh "export HOST_UID_GID=\$(id -u):\$(id -g)"
        sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p  ${projectName} exec -T e2e-electron cypress run"
        // run specific specs example
        // sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p  ${projectName} exec -T e2e-electron cypress run --spec '**/e2e/e2e/propagatie-overheid.cy.js'"
      }
    }
  }
  post {
    always {
      sh "mkdir -p ${WORKSPACE}/reports"
      sh "mkdir -p ${WORKSPACE}/reports/cypress_screenshots/"
      sh "touch ${WORKSPACE}/reports/cypress_screenshots/test.png"
      sh "cp -rf ${WORKSPACE}/cypress/screenshots ${WORKSPACE}/reports/cypress_screenshots || true"
      sh "ls ${workspace}/kaleidos-project/data/files"

      // Cypress reports and screenshots

      archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/cypress_screenshots/**/*.png'
      publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'reports', reportFiles: 'index.html', reportName: 'Build Reports', reportTitles: 'Build report'])

      // Stack service logs
      sh "mkdir -p ${WORKSPACE}/service-logs"
      sh '''
      cd $WORKSPACE/kaleidos-project &&
      for container_name in $(docker compose -p $projectName ps | awk '{print $1}' | tail -n +3)
      do
      docker logs -t $container_name > $WORKSPACE/service-logs/$container_name.log 2>&1
      done
      '''
      archiveArtifacts allowEmptyArchive: true, artifacts: 'service-logs/*.log'
    }
    cleanup {
      sh "export HOST_UID_GID=\$(id -u):\$(id -g)"
      sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} down -v"
      sh "cd ${WORKSPACE}/kaleidos-project && docker compose -p ${projectName} rm -f"
      sh "docker network prune -f"
      cleanWs()
    }
  }
}
